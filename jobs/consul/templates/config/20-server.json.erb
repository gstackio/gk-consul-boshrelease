<%
    require "json"

    consul_servers = []
    if_link("consul-servers") do |servers|
        if !servers.p("server")
            raise "The Consul instances provided by the 'consul-servers' link are not Consul servers."
        end
        consul_servers = servers.instances
    end

    config = {
        server: p("server"),


        ports: {
            http: 8500,
        },
    }

    if p("server")
        config[:bootstrap_expect] = consul_servers.count
        config[:bind_addr] = "0.0.0.0"   # we pin & explicit this default value
        config[:client_addr] = "0.0.0.0" # when running server mode, we need API, RPC and DNS to be reachable

        # NOTE: in order to support multi-homed VMs, having multiple NICs and
        # thus multiple candidate IPv4 addresses to advertise to the rest of
        # the Consul cluster, we explicitely advertise the IPv4 address of the
        # first BOSH network.
        first_network_ip_addr = spec.networks.send(spec.networks.methods(false).first).ip
        config[:advertise_addr] = first_network_ip_addr

        # config[:telemetry] = {}
    end

    if p("tls.enabled")
        config[:ports][:http] = -1
        config[:ports][:https] = 8501
        config[:tls_min_version] = p("tls.min_version")
        config[:cert_file] = "/var/vcap/jobs/consul/tls/agent.crt"
        config[:key_file] = "/var/vcap/jobs/consul/tls/agent.key"
        config[:ca_file] = "/var/vcap/jobs/consul/tls/consul-ca-bundle.crt"
        config[:verify_incoming] = p("tls.enforce_mutual_tls")
        config[:verify_outgoing] = true
        config[:verify_server_hostname] = p("tls.enforce_mutual_tls")
    end
-%>
<%= JSON.pretty_generate(config) %>
